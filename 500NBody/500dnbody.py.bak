import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import numba
from tqdm import tqdm # 用于显示进度条

# -------------------------------------------------------------------
# --- 模拟参数 (严格遵循 Ostriker & Peebles 1973, "标准模型") ---
# -------------------------------------------------------------------
N = 300                  # 粒子数量 (论文 §II.b)
R = 1.0                  # 盘的初始半径 (论文 §II.b)
C_SOFTENING = 0.05       # 引力软化因子 "cutoff radius" (论文 §II.b)
DT = 0.001               # 时间步长 (论文 §II.b)
HALO_MASS_RATIO = 1.2    # 晕质量与盘质量的比值 (标准模型为0) (论文 §II.b)
SIGMA_CONST = 0.8      # Toomre稳定性参数σ (比最小值大20%) (论文 §II.b, eq.[8])
G = 1.0                  # 万有引力常数 (单位选择) (论文 §II.a)
PARTICLE_MASS = 1.0      # 单个粒子的质量 (单位选择) (论文 §II.a)

# -----------------------------------------------------------------
# --- Numba 加速的核心计算函数 ---
# -----------------------------------------------------------------

@numba.njit(fastmath=True)
def calculate_accelerations(pos, mass, halo_mass, G, softening, disk_radius):
    n_particles = pos.shape[0]
    acc = np.zeros((n_particles, 3))

    for i in range(n_particles):
        for j in range(i + 1, n_particles):
            r_vec = pos[j] - pos[i]
            dist_sq = r_vec[0]**2 + r_vec[1]**2 + r_vec[2]**2
            inv_r3 = (dist_sq + softening**2)**(-1.5)
            force_mag = G * mass[i] * mass[j] * inv_r3
            force_vec = force_mag * r_vec
            acc[i] += force_vec / mass[i]
            acc[j] -= force_vec / mass[j]

    if halo_mass > 0:
        for i in range(n_particles):
            r_vec = pos[i]
            r_mag = np.sqrt(r_vec[0]**2 + r_vec[1]**2 + r_vec[2]**2)
            if r_mag == 0:
                continue
            if r_mag < disk_radius:
                scalar_acc = -(1.1**2 * halo_mass) / (disk_radius * (r_mag + 0.1 * disk_radius)**2)
            else:
                scalar_acc = - (halo_mass / r_mag**3)
            acc[i] += scalar_acc * r_vec
            
    return acc

# -----------------------------------------------------------------
# --- 设置初始条件的辅助函数 ---
# -----------------------------------------------------------------

def setup_initial_conditions(n, r_disk, m_particle, sigma_k):
    pos = np.zeros((n, 3))
    vel = np.zeros((n, 3))
    mass = np.ones(n) * m_particle

    n_rings = n // 10
    n_segments = 10
    particles_per_ring = n_segments
    
    for i in range(n_rings):
        r_min = i * (r_disk / n_rings)
        r_max = (i + 1) * (r_disk / n_rings)
        for j in range(n_segments):
            phi_min = j * (2 * np.pi / n_segments)
            phi_max = (j + 1) * (2 * np.pi / n_segments)
            
            # 在单元格内随机选择 r 和 phi
            rand_r = np.sqrt(np.random.uniform(r_min**2, r_max**2)) # 均匀面积采样
            rand_phi = np.random.uniform(phi_min, phi_max)
            
            idx = i * particles_per_ring + j
            pos[idx, 0] = rand_r * np.cos(rand_phi)
            pos[idx, 1] = rand_r * np.sin(rand_phi)
            pos[idx, 2] = 0.0 # 初始为平坦的盘

    initial_acc = calculate_accelerations(pos, mass, 0.0, G, C_SOFTENING, r_disk)
    
    radii = np.sqrt(pos[:,0]**2 + pos[:,1]**2)
    ring_indices = (radii / (r_disk / n_rings)).astype(int)
    
    v_circ_profile = np.zeros(n_rings)
    for i in range(n_rings):
        mask = (ring_indices == i)
        if not np.any(mask): continue
        
        r_dot_a = pos[mask, 0] * initial_acc[mask, 0] + pos[mask, 1] * initial_acc[mask, 1]
        v_circ_profile[i] = np.sqrt(np.mean(-r_dot_a))

    for i in range(n):
        ring_idx = ring_indices[i]
        v_mag = v_circ_profile[ring_idx]
        vel[i, 0] = -v_mag * pos[i, 1] / radii[i]
        vel[i, 1] =  v_mag * pos[i, 0] / radii[i]

    ring_radii_avg = np.array([(i + 0.5) * (r_disk / n_rings) for i in range(n_rings)])
    d_ln_v_d_ln_r = np.gradient(np.log(v_circ_profile), np.log(ring_radii_avg))
    
    sigma_r_vals, sigma_theta_vals, sigma_z_vals = np.zeros(n_rings), np.zeros(n_rings), np.zeros(n_rings)

    for i in range(n_rings):
        v = v_circ_profile[i]
        if v == 0: continue
        
        nu_val = v * np.sqrt(1 + d_ln_v_d_ln_r[i])
        
        sigma_r_T = sigma_k * np.pi * G * (particles_per_ring * m_particle / (2 * np.pi * ring_radii_avg[i] * (r_disk/n_rings))) / nu_val
        sigma_r_S = 0.4 * v
        
        sigma_r = min(sigma_r_T, sigma_r_S)
        
        if i == n_rings - 1:
            sigma_r /= 2.0
            
        sigma_theta = sigma_r / (np.sqrt(2) * np.sqrt(1 + d_ln_v_d_ln_r[i]))
        sigma_z = sigma_theta

        sigma_r_vals[i], sigma_theta_vals[i], sigma_z_vals[i] = sigma_r, sigma_theta, sigma_z

    vel_before_random = vel.copy()
    for i in range(n):
        r, phi = radii[i], np.arctan2(pos[i,1], pos[i,0])
        ring_idx = ring_indices[i]
        
        # 从正态分布中抽取随机速度
        rand_vr = np.random.normal(0, sigma_r_vals[ring_idx])
        rand_vtheta = np.random.normal(0, sigma_theta_vals[ring_idx])
        rand_vz = np.random.normal(0, sigma_z_vals[ring_idx])

        # 转换到笛卡尔坐标并叠加
        vel[i, 0] += rand_vr * np.cos(phi) - rand_vtheta * np.sin(phi)
        vel[i, 1] += rand_vr * np.sin(phi) + rand_vtheta * np.cos(phi)
        vel[i, 2] += rand_vz
        
    # --- 4. 重新标定动能 ---
    # 方法：将每个环的总动能恢复到增加弥散之前的值，以维持近似平衡。
    for i in range(n_rings):
        mask = (ring_indices == i)
        if not np.any(mask): continue
        
        ke_before = 0.5 * np.sum(mass[mask, np.newaxis] * vel_before_random[mask]**2)
        ke_after = 0.5 * np.sum(mass[mask, np.newaxis] * vel[mask]**2)
        
        if ke_after == 0: continue
        
        scale_factor = np.sqrt(ke_before / ke_after)
        vel[mask] *= scale_factor
        
    v_outer = v_circ_profile[-1]
    orbital_period = 2 * np.pi * r_disk / v_outer if v_outer > 0 else 10.0
    
    return pos, vel, mass, orbital_period

# -----------------------------------------------------------------
# --- 模拟主循环 ---
# -----------------------------------------------------------------

def run_simulation(sim_time, dt, pos, vel, mass, halo_mass, G, softening, disk_radius):
    num_steps = int(sim_time / dt)
    positions_history = np.zeros((num_steps, pos.shape[0], 3))
    
    acc = calculate_accelerations(pos, mass, halo_mass, G, softening, disk_radius)
    
    for step in tqdm(range(num_steps)):
        vel += acc * (dt / 2.0)
        pos += vel * dt
        
        acc = calculate_accelerations(pos, mass, halo_mass, G, softening, disk_radius)
        vel += acc * (dt / 2.0)
        
        positions_history[step] = pos
    return positions_history

# -----------------------------------------------------------------
# --- 主程序和可视化 ---
# -----------------------------------------------------------------

if __name__ == '__main__':
    pos_init, vel_init, mass, P_outer = setup_initial_conditions(N, R, PARTICLE_MASS, SIGMA_CONST)

    SIM_TIME = P_outer * 1.0

    disk_mass_total = N * PARTICLE_MASS
    halo_mass_total = disk_mass_total * HALO_MASS_RATIO
    
    positions_history = run_simulation(SIM_TIME, DT, pos_init, vel_init, mass, halo_mass_total, G, C_SOFTENING, R)

    fig, ax = plt.subplots(figsize=(8, 8))
    ax.set_facecolor('black')
    ax.set_xticks([])
    ax.set_yticks([])
    plt.tight_layout()

    # 初始散点图
    scatter = ax.scatter(positions_history[0, :, 0], positions_history[0, :, 1], s=5, c='white', alpha=0.8)
    time_text = ax.text(0.05, 0.95, '', transform=ax.transAxes, color='white', fontsize=12)

    def init_animation():
        lim = R * 1.5
        ax.set_xlim(-lim, lim)
        ax.set_ylim(-lim, lim)
        return scatter, time_text

    def animate(frame):
        scatter.set_offsets(positions_history[frame, :, 0:2])
        current_time_tau = (frame * DT) / P_outer
        time_text.set_text(f't = {current_time_tau:.2f}')
        return scatter, time_text

    frame_step = 5
    num_frames = positions_history.shape[0] // frame_step
    
    ani = FuncAnimation(fig,
                        lambda frame: animate(frame * frame_step),
                        frames=num_frames,
                        init_func=init_animation,
                        blit=True,
                        interval=30) # 毫秒间隔

    plt.show()
